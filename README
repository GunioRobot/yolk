Welcome to Yolk!

Contents of this README:

    1. Introduction
    2. Dependencies
    3. Compiling And Trying Out Yolk
    4. The Yolk Structure
    5. Using Yolk
    6. Getting Rid Of The GNATCOLL/PostgreSQL Dependency
    7. Fixing The .gitignore File
    8. References

-------------------
--  Introduction --
-------------------

Yolk is an Ada based web-framework that sits on top of AWS[1], XML/Ada[2], 
GNATCOLL[3] and PostgreSQL[4].
With Yolk some of the tasks involved in developing a web-application using Ada,
AWS and GNATCOLL is made simpler and a specific style is enforced in regards to
how the application is made.

It is important to understand that Yolk itself does very little that cannot be
accomplished using plain AWS and GNATCOLL. It is, for lack of a better term, a
convenience. Some of things that Yolk make very easy are:

    * Sending simple (no attachments) HTML/text emails from the application
    * Setting up rotating log files and handling basic log file management
    * Adding new resources to your web application
    * Loading configuration files
    * Handling the most common static content types (HTML, PNG, ICO and so on)
    * Easy RSS 2.0 generation

Yolk is not a magic bullet though. If your needs are very complex, you might
be better off using plain AWS.

--------------------
--  Dependencies  --
--------------------

Yolk depends on five things:

    1. An Ada 2005 compiler[5]
    2. AWS
    3. XML/Ada
    4. GNATCOLL
    5. PostgreSQL (if you need it)

The path to the AWS, XML/Ada and GNATCOLL project files must be added to the
ADA_PROJECT_PATH environment variable, or else your Yolk project wont
compile.

My usual modus operandi for setting up these 5 things goes something like this:

    1.  Install GNAT GPL in its default location (/usr/gnat)
    2.  Install XML/Ada in /usr/gnat (./configure --prefix=/usr/gnat)
    3.  Install GNATCOLL in /usr/gnat:
    
            /configure --prefix=/usr/gnat \
            --disable-gtk \
            --disable-pygtk \
            --without-python \
            --with-postgresql=/usr/include/postgresql \
            --without-sqlite \
            --disable-syslog
            
    4.  Install AWS in its default location. See makefile.conf for further
        information. After having run "$ make setup", be sure to check that 
        makefile.setup contains the correct information. It should look
        something like this, of course depending on how much you've enabled
        in the makefile.conf file:
        
            prefix=/usr/gnat/bin/..
            DEFAULT_LIBRARY_TYPE=static
            DEFAULT_TARGET=native
            ENABLE_SHARED=true
            ZLIB=true
            XMLADA=true
            ASIS=false
            IPv6=false
            SOCKET=std
            LDAP=false
            DEBUG=false
            CJOBS=2
            DEMOS=false
            TARGET=native
            
    5.  Add /usr/gnat/bin to your PATH environment variable.
    6.  Add /usr/gnat/lib/gnat to your ADA_PROJECT_PATH environment variable.

For reference, I can say that on my Slackware Linux system, I have the AWS,
XML/Ada and GNATCOLL project files available in these directories:

    /usr/gnat/lib/gnat/aws.gpr
    /usr/gnat/lib/gnat/xmlada.gpr
    /usr/gnat/lib/gnat/gnatcoll_postgresql.gpr

My ADA_PROJECT_PATH environment variable hence contains this:

    /usr/gnat/lib/gnat

If your distribution provides pre-made packages for all of this, you should
probably use those instead.

PostgreSQL must be installed on both the system where the Yolk application is
compiled and on the system where the application will be running.

The GNATCOLL/PostgreSQL dependencies are a bit annoying for applications that
doesn't need access to a RDBMS, but I've found that those applications are few
and far between. If you absolutely don't want those dependencies, then take a
look at the "Getting Rid Of The GNATCOLL/PostgreSQL Dependency" section of this
document.

-------------------------------------
--  Compiling And Trying Out Yolk  --
-------------------------------------

When you clone Yolk from the offical Git repository, what you get is not 
immediately ready to be compiled. If you try:

    $ cd /path/to/yolk.gpr
    $ gnatmake -P yolk.gpr

You'll end up with an error that looks something like this:

    gcc -c -gnatwa -gnaty3abcdefhiklmnoprstux -Wall -O2 -gnat05 -I- -gnatA 
      /path/to/Yolk/yolk.adb
    yolk.adb:27:06: file "my_handlers.ads" not found
    yolk.adb:27:06: "Yolk (body)" depends on "Handlers (spec)"
    yolk.adb:27:06: "Handlers (spec)" depends on "My_Handlers (spec)"
    gnatmake: "/path/to/Yolk/yolk.adb" compilation error

The reason for this is simple: Most of the files that you must do something with
in order for Yolk to produce output to a browser are marked with an .example
extension. This has been done to clearly mark the files in which changes must
and will be done in order for _your_ version of Yolk to function.

So the first we thing we need to do is find all the .example files and get rid
of the .example extension. For this we have the tools/start.sh script:

    $ cd /path/to/yolk.gpr
    $ tools/start.sh

That should result in some output clearly telling you that a bunch of 
.example file has been copied to their .example-less equivalent.

Now lets try compiling Yolk again:

    $ cd /path/to/yolk.gpr
    $ gnatmake -P yolk.gpr

This time the result should be a yolk executable in the exe/ directory and a
bunch of object files in the build/ directory. 

If you've installed your Ada compiler to somewhere else than /usr/gnat/bin
and you intend to compile Yolk using an IDE such as GPS, then make sure that
the "for Compiler_Command" option in yolk.gpr is adjusted accordingly.

Starting Yolk is as simple as:

    $ cd /path/to/yolk/exe
    $ ./yolk

You should now see something happening in the exe/logs/ directory, and you
can access the demo Yolk website by visiting http://localhost:4242 using any
browser.

To see the status page for the application, go to http://localhost:4242/status
and enter "admin" as username and "changemenow" as password. Please make sure 
that this password is changed before you go public with your application.

You can shutdown the server cleanly by pressing CTRL+c. Or simply kill the PID
found in the yolk.pid file.

If the index page (with all the static content tests) are shown correctly and
you can access the status page, then Yolk is ready to be used for your own
purposes.

--------------------------
--  The Yolk Structure  --
--------------------------

In the main Yolk directory you'll find some directories and files. Knowing what
each of these do is crucial to using Yolk properly, so I'm going to meticulously
describe it all. If you're an adventurous type you can skip this section, but
for the rest of us, it's worth reading.

Paths and files described in the following will assume that you're in the same
directory as the yolk.gpr file.

build/
    This directory contains all the objects generated by the compiler. There's
    an empty .gitignore file in this directory. Content in the build/
    directory is not tracked by Git.
    If you want to place the compiler objects somewhere else, then you have to
    change the "for Object_Dir use" option in yolk.gpr.
   
core/
    This directory contains the Yolk source code. In general you should not
    have to mess around in core/ at all. If you need to add new functionality
    to Yolk, you should use the my_core directory to avoid having your source
    overwritten by an Yolk update.

exe/
    This directory contains the finished Yolk application. Here you will find
    configuration files relevant to the application, the logs/ directory where
    log files are kept, a session directory to hold session data between server
    restarts, the status/ directory where the server status template is located
    and finally the static content directories and the templates used by the
    application.
    The entire exe/ directory is self-contained, meaning that it can be copied/
    moved to another place and the application will then run from there.
    
my_configuration/
    The my_* directories is where you're supposed to place your application spe-
    cific code. In my_configuration/ you will find an example on how to setup
    your own configuration system. The two example files are used in the default
    Yolk application and can be freely altered so suit the needs of your applica-
    tion. See the README file in the directory for further explanation.
    
my_core/
    The my_core/ directory is supposed to hold whatever packages your application
    need to run properly. These should _not_ be placed in core/ to avoid having
    them overwritten by a later update.
    Files in my_core/ will never be overwritten, with the exception of the README
    file.
    
my_database/
    The intention of this directory is to be the home of the Ada source files 
    generated by the GNATCOLL tool gnatcoll_db2ada. This tool generates Ada source
    files based on your database schema. A usage example is presented in the 
    my_database/README file.
    You can of course also use this directory for other database related code.
    
my_handlers/
    The two my_handlers.ad[bs] files found here are required in order for the Yolk
    application to function properly. You can freely add/remove handlers in these
    files. See the README file in the directory for more information.
    
my_view/
    This is where you're supposed to place the meat of your application: The code
    where the actual content is generated. I usually go with a parent/child setup
    where each child represents a specific resource, and the parent holds whatever
    data that needs to be shared among the children.
    See the README file for more information.
    
tools/
    Here you will find various scripts to help setup and maintain a Yolk application.

./
    The main Yolk.adb source file, the project file, this README and the license
    is found here.
    
The most important thing to take away from all this is: You should only ever placed
your code in the my_* directories. Let the rest stay as they are, to ease the process
of upgrading Yolk. It is _much_ easier to just grab a new main yolk.adb and the 
accompanying core/ files, without having to worry about overwriting your own code.

------------------
--  Using Yolk  --
------------------

There's a short process you will have to go through before building a new Yolk
application:

    1. Download and unpack Yolk. See the Dependencies and Compiling Yolk sections.
    2. Run the tools/startup.sh script.
    3. Verify that the default Yolk application works by visiting the demo website.
    4. Adjust the my_configuration.ad[bs] files to suit your needs.
    5. Adjust the my_handlers.ad[bs] to account for your content.
    6. Add my_view/view.xxx files for all your resources.
    
You should of course read all configuration files and make sure you understand what
the different settings do.

When starting a Yolk application, a PID file is placed in the exe/ directory. The
process ID of the running application can be found in this file. The PID file is 
destroyed when the application exits. The Yolk application does _not_ fork to 
background, so if you want to avoid blocking the shell, use the & character to send
it into the background:

    $ yolk &

The application can be properly shutdown using the following four signals:

    1. SIGHUP
    2. SIGINT
    3. SIGTERM
    4. SIGPWR
    
Or you can simply bring it to the foreground and click CTRL+c.

Managing the log files is done auto-magically. You do not have to worry about his,
as long as your log file configuration settings are sane.

The source files are self-documenting, meaning that they are commented in a way 
that makes it easy to "get" what is going on, so if you want to know how to send
and email using Yolk, just open the two core/simple_email.ad[bs] files and read
source. In some cases there will even be usage examples in the source code.

The official AWS, GNATCOLL and XMLAda documentation is handy to have nearby when
building web applications using Yolk, as much of the functionality is bound to 
involve one or more of these projects. These docs are not included in Yolk.

---------------------------------------------------------
--  Getting Rid Of The GNATCOLL/PostgreSQL Dependency  --
---------------------------------------------------------

If you're not using PostgreSQL, you can get rid of it simply by removing the 
with "gnatcoll_postgres"; line in yolk.gpr.

Yes, it's that simple.

----------------------------------
--  Fixing The .gitignore File  --
----------------------------------
In the top level Yolk directory there's a .gitignore file. You should adjust
this so that your own .ini, .tmpl, .ad[bs] files are tracked. This is of
course only necessary to worry about, if you intend to use Git as your SCM.

These files are not tracked by default. Instead the .example files are tracked.
This makes it easier to upgrade to a newer Yolk version, without having to
worry about overwriting ones own files.

------------------
--  References  --
------------------
[1]
    Ada Web Server
    http://libre.adacore.com/libre/tools/aws/
    
[2]
    XML/Ada
    http://libre.adacore.com/libre/tools/xmlada/

[3]
    GNAT Component Collection
    http://libre.adacore.com/libre/tools/gnat-component-collection/

[4]
    PostgreSQL
    http://www.postgresql.org/

[5]
    I personally use the GNAT GPL compiler from AdaCore
    http://libre.adacore.com/libre/
