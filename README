Welcome to Yolk!

Contents of this README:

    1. Introduction
    2. Dependencies
    3. Compiling Yolk
    4. The Yolk Structure
    5. Using Yolk
    6. Getting Rid Of The GNATCOLL/PostgreSQL Dependency
    7. References

-------------------
--  Introduction --
-------------------

Yolk is an Ada based web-framework that sits on top of AWS[1] and GNATCOLL[2].
With Yolk some of the tasks involved in developing a web-application using Ada,
AWS and GNATCOLL is made simpler and a specific style is enforced in regards to
how the application is made.

It is important to understand that Yolk itself does very little that cannot be
accomplished using plain AWS and GNATCOLL. It is, for lack of a better term, a
convenience. Some of things that Yolk make very easy are:

    * Sending simple (no attachment) HTML/text emails from the application
    * Setting up rotating log files
    * Adding new resources to your web application
    * Loading configuration files
    * Handling the most common static content types (HTML, PNG, ICO and so on)

Yolk is not a magic bullet though. If your needs are very complex, you might
be better off using plain AWS.

--------------------
--  Dependencies  --
--------------------

Yolk depends on four things:

    1. AWS[1]
    2. GNATCOLL[2]
    3. PostgreSQL[3]
    4. An Ada 2005 compiler[4]

The path to the AWS and GNATCOLL project files must be added to the
ADA_PROJECT_PATH environment variable, or else your Yolk project wont
compile.

PostgreSQL must be installed on both the system where the Yolk application is
compiled and on the system where the application will be running.

GNATCOLL must be compiled with the --with-postgresql=<dir> configuration option
set.

The GNATCOLL/PostgreSQL dependencies are a bit annoying for applications that
doesn't need access to a RDBMS, but I've found that those applications are few
and far between. If you absolutely don't want those dependencies, then take a
look at the "Getting Rid Of The GNATCOLL/PostgreSQL Dependency" section of this
document. The process is a bit involved but if you've managed to compile AWS
and setup an Ada compiler, then I'm sure messing around in the very simple Yolk
source code will be a walk in the park.

For reference, I can say that on my Slackware Linux system, I have the AWS and
GNATCOLL project files available in these directories:

    /usr/gnat/lib/gnat/aws.gpr
    /usr/local/lib/gnat/gnatcoll_postgresql.gpr

My ADA_PROJECT_PATH environment variable hence contains these two paths:

    /usr/gnat/lib/gnat:/usr/local/lib/gnat

----------------------
--  Compiling Yolk  --
----------------------

When you clone Yolk from the offical Git repository, what you get is not 
immediately ready to be compiled. If you try:

    $ cd /path/to/yolk.gpr
    $ gnatmake -P yolk.gpr

You'll end up with an error that looks something like this:

    gcc -c -gnatwa -gnaty3abcdefhiklmnoprstux -Wall -O2 -gnat05 -I- -gnatA 
      /path/to/Yolk/yolk.adb
    yolk.adb:27:06: file "my_handlers.ads" not found
    yolk.adb:27:06: "Yolk (body)" depends on "Handlers (spec)"
    yolk.adb:27:06: "Handlers (spec)" depends on "My_Handlers (spec)"
    gnatmake: "/path/to/Yolk/yolk.adb" compilation error

The reason for this is simple: All the files that you must do something with
in order for Yolk to produce output to a browser are marked with a .example
extension. This has been done to clearly mark the files in which changes must
and will be done in order for _your_ version of Yolk to function.

So the first we thing we need to do is find all the .example files and get rid
of the .example extension.

    $ cd /path/to/yolk.gpr
    $ find . -name *.example

That should result in output similar to this:

    ./my_configuration/my_configuration.ads.example
    ./my_configuration/my_configuration.adb.example
    ./my_handlers/my_handlers.adb.example
    ./my_handlers/my_handlers.ads.example
    ./my_view/view.ads.example
    ./my_view/view-index.ads.example
    ./my_view/view-index.adb.example
    ./my_view/view-foo.adb.example
    ./my_view/view.adb.example
    ./my_view/view-foo.ads.example
    ./exe/configuration/GNATCOLL.SQL.Logs.ini.example
    ./exe/configuration/config.ini.example
    ./exe/configuration/my_config.ini.example
    ./exe/templates/system/404.tmpl.example
    ./exe/templates/website/index.tmpl.example
    ./exe/templates/website/foo.tmpl.example
    ./exe/aws.ini.example

Those 17 files must have their .example extension removed either by renaming
or copying. When that is done we can try compiling Yolk again:

    $ cd /path/to/yolk.gpr
    $ gnatmake -P yolk.gpr

This time the result should be a yolk executable in the exe/ directory and a
bunch of object files in the build/ directory.

--------------------------
--  The Yolk Structure  --
--------------------------

./my_configuration/my_configuration.ads.new
./my_configuration/my_configuration.adb.new
./my_handlers/my_handlers.ads.new
./my_handlers/my_handlers.adb.new
./my_view/view-foo.ads.new
./my_view/view.adb.new
./my_view/view-index.ads.new
./my_view/view.ads.new
./my_view/view-index.adb.new
./my_view/view-foo.adb.new

------------------
--  Using Yolk  --
------------------

---------------------------------------------------------
--  Getting Rid Of The GNATCOLL/PostgreSQL Dependency  --
---------------------------------------------------------


------------------
--  References  --
------------------
[1]
    Ada Web Server
    http://libre.adacore.com/libre/tools/aws/

[2]
    GNAT Component Collection
    http://libre.adacore.com/libre/tools/gnat-component-collection/

[3]
    PostgreSQL
    http://www.postgresql.org/

[4]
    I personally use the GNAT GPL compiler from AdaCore
    http://libre.adacore.com/libre/
