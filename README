Welcome to Yolk!

Contents of this README:

    1. Introduction
    2. Dependencies
    3. Adding PostgreSQL support
    4. The Yolk Structure
    5. Using Yolk
    6. Fixing The .gitignore File
    7. References

-------------------
--  Introduction --
-------------------

Yolk is an Ada based web-framework that sits on top of AWS[1], GNATcoll[2] and
optionally XML/Ada[3], and PostgreSQL[4].
With Yolk some of the tasks involved in developing a web-application using Ada 
is made simpler and a specific style is "enforced" in regards to how the 
application is put together.

It is important to understand that Yolk itself does very little that cannot be
accomplished using plain AWS and GNATcoll. It is, for lack of a better term, a
convenience. Some of things that Yolk make very easy are:

    * Sending emails from the application
    * Setting up rotating log files and handling basic log file management
    * Adding new resources to your web application
    * Loading configuration files
    * Handling the most common static content types (HTML, PNG, ICO and so on)
    * Easy RSS 2.0 generation

Yolk is not a magic bullet though. If your needs are very complex, you might
be better off using plain AWS.

--------------------
--  Dependencies  --
--------------------

Yolk depends on 5 things out of the box. 3 of those are required, and 2 are
optional:

    1. An Ada 2005 compiler[5] (required)
    2. AWS (required)
    3. GNATcoll (required)
    4. XML/Ada (optional - AWS requires this for SOAP support)
    5. PostgreSQL (optional - only necessary if you need access to a database)

In the following I'll assume that both XML/Ada and PostgreSQL is necessary.

The path to the AWS, GNATcoll and XML/Ada project files must be added to the
ADA_PROJECT_PATH environment variable, or else your Yolk project wont
compile.

My usual modus operandi for setting up these 5 things goes something like this:

    1.  Install PostgreSQL by whatever means is fitting for your OS. If you don't
        need an RDBMS, ignore this step and adjust the following steps to get
        rid of the PostgreSQL dependency. It should be quite obvious where 
        changes are needed.
        
    2.  Install GNAT GPL in its default location (/usr/gnat) and add /usr/gnat/bin
        to your PATH:

            $ PATH=$PATH:/usr/gnat/bin
            $ export PATH

        You might want to add this to .bashrc:

            PATH=$PATH:/usr/gnat/bin
            export PATH

        And this to .bash_profile:

            if [ -f ~/.bashrc ]; then
                . ~/.bashrc;
            fi

        Of course depending on your system. Mine is Slackware. The important
        thing is to make sure /usr/gnat/bin is added to your PATH even after
        a reboot.

    3.  Install GNATcoll in /usr/gnat:
    
            ./configure --prefix=/usr/gnat \
            --disable-gtk \
            --disable-pygtk \
            --without-python \
            --with-postgresql=/usr/include/postgresql \
            --without-sqlite \
            --disable-syslog
        
        You should of course adjust the above configuration options to fit your
        needs.
        At the time of writing, the GNATcoll "make" step will fail if you don't
        manually define the "PROCESSORS" variable, like this:

            $ PROCESSORS=4 make
            $ make install

        Of course adjusting the PROCESSORS number to what is suitable on your
        own system.
        
    4.  Install XML/Ada in /usr/gnat:
    
            ./configure --prefix=/usr/gnat
            
    5.  Install AWS in its default location. See makefile.conf for further
        information. After having run "$ make setup", be sure to check that 
        makefile.setup contains the correct information. It should look
        something like this, of course depending on how much you've enabled
        in the makefile.conf file:
        
            prefix=/usr/gnat/bin/..
            DEFAULT_LIBRARY_TYPE=static
            DEFAULT_TARGET=native
            ENABLE_SHARED=true
            ZLIB=true
            XMLADA=true
            ASIS=false
            IPv6=false
            SOCKET=openssl
            LDAP=false
            DEBUG=false
            CJOBS=2
            DEMOS=false
            TARGET=native
            
    5.  Add /usr/gnat/bin to your PATH environment variable.
    
    6.  Add /usr/gnat/lib/gnat to your ADA_PROJECT_PATH environment variable.

Don't take the above for gospel. You should _always_ read all the accompanying
documentation for the software you're trying to install.

For reference, I can say that on my Slackware Linux system, I have the AWS,
XML/Ada and GNATcoll project files available in these directories:

    /usr/gnat/lib/gnat/aws.gpr
    /usr/gnat/lib/gnat/xmlada.gpr
    /usr/gnat/lib/gnat/gnatcoll_postgresql.gpr

My ADA_PROJECT_PATH environment variable hence contains this:

    /usr/gnat/lib/gnat

If your distribution provides pre-made packages for all of this, you should
probably use those instead.

---------------------------------
--  Adding PostgreSQL Support  --
---------------------------------

Simply find and uncomment this line in the yolk.gpr file:

    --  with "gnatcoll_postgresql"

Yes, it's that simple. This will of course only work if you have compiled
GNATcoll with PostgreSQL support and you have PostgreSQL installed.

--------------------------
--  The Yolk Structure  --
--------------------------

In the main Yolk directory you'll find some directories and files. Knowing what
each of these do is crucial to using Yolk properly, so I'm going to meticulously
describe it all. If you're an adventurous type you can skip this section, but
for the rest of us, it's worth reading.

Paths and files described in the following are relative to the directory where
the yolk.gpr file is located.

build/
    This directory contains all the objects generated by the compiler. Content 
    in the build/ directory is not tracked by Git.
    If you want to place the compiler objects somewhere else, then you have to
    change the "for Object_Dir use" option in yolk.gpr.
   
core/
    This directory contains the Yolk source code. In general you should not
    have to mess around in core/ at all. If you need to add new functionality
    to Yolk, you should use the my_core directory instead.

docs/
    Here you'll find documentation on how to setup, run and build your Yolk 
    application.

exe/
    This directory contains the finished Yolk application. Here you will find
    configuration files relevant to the application, the logs/ directory where
    log files are kept, a session directory to hold session data between server
    restarts, the status/ directory where the server status template is located
    and finally the static content directories and the templates used by the
    application.
    The entire exe/ directory is self-contained, meaning that it can be copied/
    moved to another place and the application will then run from there.
    
my_configuration/
    The my_* directories is where you're supposed to place your application spe-
    cific code. In my_configuration/ you will find an example on how to setup
    your own configuration system. See docs/ for more information.
    
my_core/
    The my_core/ directory is supposed to hold whatever packages your application
    need to run properly. See docs/ for more information.
    
my_database/
    The intention of this directory is to be the home of the Ada source files 
    generated by the GNATcoll tool gnatcoll_db2ada. This tool generates Ada source
    files based on your database schema. You can of course also use this directory
    for other database related code. See docs/ for more information.
    
my_handlers/
    The two my_handlers.ad[bs] files found here are required in order for the Yolk
    application to function properly. You can freely add/remove handlers in these
    files. See docs/ for more information.
    
my_view/
    This is where you're supposed to place the meat of your application: The code
    where the actual content is generated. I usually go with a parent/child setup
    where each child represents a specific resource, and the parent holds whatever
    data that needs to be shared among the children. See docs/ for more information.

./
    The main Yolk.adb source file, the project file, an INSTALL file, this README 
    and the license is found here.
    
The most important thing to take away from all this is: You should only ever place
your code in the my_* directories. Let the rest stay as they are, to ease the process
of upgrading Yolk. It is _much_ easier to just grab a new main yolk.adb and the 
accompanying core/ files, without having to worry (too much) about overwriting your 
own code.

------------------
--  Using Yolk  --
------------------

There's a short process you will have to go through before building a new Yolk
application:

    1. Clone the latest Yolk from the official repository.
    2. Verify that the default Yolk application works by visiting the demo website.
    3. Adjust the my_configuration.ad[bs] files to suit your needs.
    4. Adjust the my_handlers.ad[bs] to account for your content.
    5. Add my_view/view.xxx files for all your resources.
    
You should of course read all configuration files and make sure you understand what
the different settings do.

When starting a Yolk application, a PID file is placed in the exe/ directory. The
process ID of the running application can be found in this file. The PID file is 
destroyed when the application exits. The Yolk application does _not_ fork to 
background, so if you want to avoid blocking the shell, use the & character to send
it into the background:

    $ yolk &

The application can be properly shutdown using the following four signals:

    1. SIGHUP
    2. SIGINT
    3. SIGTERM
    4. SIGPWR
    
Or you can simply bring it to the foreground and click CTRL+c.

Managing the log files is done auto-magically. You do not have to worry about his,
as long as your log file configuration settings are sane.

The source files are self-documenting, meaning that they are commented in a way 
that makes it easy to "get" what is going on, so if you want to know how to send
and email using Yolk, just open the two core/simple_email.ad[bs] files and read the
source. In some cases there will even be usage examples in the source code.

The official AWS, GNATcoll and XMLAda documentation is handy to have nearby when
building web applications using Yolk, as much of the functionality is bound to 
involve one or more of these projects. These docs are not included in Yolk.

----------------------------------
--  Fixing The .gitignore File  --
----------------------------------
In the top level Yolk directory there's a .gitignore file. You should adjust
this so it matches your own needs. This is of course only necessary to worry about, 
if you intend to use Git as your VCS.

------------------
--  References  --
------------------
[1]
    Ada Web Server
    http://libre.adacore.com/libre/tools/aws/

[2]
    GNAT Component Collection
    http://libre.adacore.com/libre/tools/gnat-component-collection/

[3]
    XML/Ada
    http://libre.adacore.com/libre/tools/xmlada/

[4]
    PostgreSQL
    http://www.postgresql.org/

[5]
    I personally use the GNAT GPL compiler from AdaCore
    http://libre.adacore.com/libre/
