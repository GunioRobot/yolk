# All keys used in this file _must_ be defined in the Yolk.Configuration.Keys
# type found in the Yolk.Configuration package.
#
# Accessing a key with no value returns an empty string if the target is
# String or Unbounded_String.
# If a valid key is commented (or missing entirely), it is ignored, and the
# default value is used.
# Default values are defined in the Yolk.Configuration.Default_Values array.
#
# Keys marked with:
#
#   Used by AWS: Yes
#
# are used by the AWS webserver component.

##################################
#       Yolk System User         #
##################################

Yolk_User thomas
# String
# Default: thomas
# Used by AWS: No
#
# The system user that owns the Yolk application. When a Yolk application is
# started, this is the user it will run as.
# If the username given does not exist, or the system can't setuid to it, the
# application wont start and a log message is written to the rotating Error log.
#
# You must of course make sure that the log file and content directories are
# read/writable by the Yolk_User.

##################################
#             Server             #
##################################

Accept_Queue_Size 64
# Positive
# Default: 64
# Used by AWS: Yes
#
# This is the size of the queue for the incoming requests. The higher this value
# is, the less "connection refused" will be reported to the client.

Case_Sensitive_Parameters True
# Boolean
# Default: True
# Used by AWS: Yes
#
# If set to True the HTTP parameters are case sensitive.

Check_URL_Validity True
# Boolean
# Default: True
# Used by AWS: Yes
#
# Server have to check URL for validity. For example it checks that an URL does not
# reference a resource above the application root directory.

Cleaner_Client_Data_Timeout 28800.0
# Duration
# Default: 28800.0 (8 hours)
# Used by AWS: Yes
#
# Number of seconds to wait for a client message body before timing out. This value
# should probably stay at its default, unless you have very specific reasons for
# changing it.

Cleaner_Client_Header_Timeout 7.0
# Duration
# Default: 7.0
# Used by AWS: Yes
#
# Number of seconds to wait for a client header before timing out. This value
# should probably stay at its default, unless you have very specific reasons for
# changing it.

Cleaner_Server_Response_Timeout 28800.0
# Duration
# Default: 28800.0 (8 hours)
# Used by AWS: Yes
#
# Number of seconds to wait for a client to answer before timing out. This value
# should probably stay at its default, unless you have very specific reasons for
# changing it.

Cleaner_Wait_For_Client_Timeout 80.0
# Duration
# Default: 80.0
# Used by AWS: Yes
#
# Number of seconds to wait for a client request, before timing out. This value
# should probably stay at its default, unless you have very specific reasons for
# changing it.

Compressed_Cache_Directory static_content/compressed_cache
# String
# Default: static_content/compressed_cache
# Used by AWS: No
#
# The directory where the .gz compressed versions of static content are saved.
# This directory is cleared out on every reboot of the server, meaning that
# _everything_ in this directory is deleted, so be very careful about the path
# you set for this parameter.
#
# This directory will be created if it doesn't exist when the server is started.
#
# This parameter only matters if Compress_Static_Content is True.
#
# NOTE:
#   Do not add the final forward slash.

Compressed_Max_Age 86400
# Natural
# Default: 86400
# Used by AWS: No
#
# If a resource compressed by the Yolk.Static_Content.Compressable function is
# more than Compressed_Max_Age seconds old, then it is deleted and compressed
# anew.
# If this is set to 0, then the compressed files are never deleted due to age.

Compress_Minimum_File_Size 200
# Natural
# Default: 200
# Used by AWS: No
#
# The minimum size, in bytes, a compressable file must have in order to be
# pre-compressed. Files below this threshold will _not_ be compressed.

Context_Lifetime 28800.0
# Duration
# Default: 28800.0
# Used by AWS: Yes
#
# Lifetime of a web block context. After this period the context data is obsoleted
# and will be removed.

Force_Client_Data_Timeout 10800.0
# Duration
# Default: 10800.0
# Used by AWS: Yes
#
# Number of seconds to wait for a client message body before timing out when
# resources are scarce.
# This value should probably stay at its default, unless you have very specific
# reasons for changing it.

Force_Client_Header_Timeout 2.0
# Duration
# Default: 2.0
# Used by AWS: Yes
#
# Number of seconds to wait for a client header before timing out when
# resources are scarce.
# This value should probably stay at its default, unless you have very specific
# reasons for changing it.

Force_Server_Response_Timeout 10800.0
# Duration
# Default: 10800.0
# Used by AWS: Yes
#
# Number of seconds to wait for a client to answer before timing out when
# resources are scarce.
# This value should probably stay at its default, unless you have very specific
# reasons for changing it.

Force_Wait_For_Client_Timeout 2.0
# Duration
# Default: 2.0
# Used by AWS: Yes
#
# Number of seconds to wait for a client request before timing out when
# resources are scarce.
# This value should probably stay at its default, unless you have very specific
# reasons for changing it.

Free_Slots_Keep_Alive_Limit 1
# Natural
# Default: 1
# Used by AWS: Yes
#
# This is the minimum number of remaining free slots to enable keep-alive HTTP
# connections. For very busy HTTP servers, the Free_Slots_Keep_Alive_Limit should be
# about 1-10% of the Max_Connection parameter, depending on the duration of the average
# server response. The longer the average time to send back a response is, the higher
# Free_Slots_Keep_Alive_Limit should be.

Hotplug_Port 8888
# Positive
# Default: 8888
# Used by AWS: Yes
#
# This is the hotplug communication port needed to register and un-register a hotplug
# module.

Keep_Alive_Force_Limit 0
# Natural
# Default: 0
# Used by AWS: Yes
#
# Defines the maximum number of keep-alive sockets that are processed with normal
# timeouts. If the amount of keep-alive sockets are more than Keep_Alive_Force_Limit,
# then the server will force shorter timeouts.
# If this parameter is commented or defined as 0, then the server will calculate the
# limit based on Max_Connection * 2.

Line_Stack_Size 16#150_000#
# Positive
# Default: 16#150_000#
# Used by AWS: Yes
#
# The HTTP line stack size. The stack size must be adjusted for each application,
# depending on the use of the stack done by the callback procedures.

Max_Concurrent_Download 25
# Positive
# Default: 25
# Used by AWS: Yes
#
# The maximum number of parallel downloads accepted by the download manager. See
# AWS.Services.Download for more information on this service.

Max_Connection 5
# Positive
# Default: 5
# Used by AWS: Yes
#
# The maximum number of simultaneous connections to the server. This is effectively
# the amount of threads in the server.
#
# One thread is used for each connection, so a value of 5 means max 5 concurrent users.

MIME_Types configuration/aws.mime
# String
# Default: configuration/aws.mime
# Used by AWS: yes
#
# The MIME type file. MIME types defined in this file are added to AWS when the
# server is started.

Receive_Timeout 30.0
# Duration
# Default: 30.0
# Used by AWS: Yes
#
# Number of seconds before timing out when receiving data.

Reuse_Address False
# Boolean
# Default: False
# Used by AWS: Yes
#
# Set the socket reuse address policy. If set to True the server will be able
# to bind to a socket that has just been released without the need for
# waiting.
#
# NOTE:
#   Enabling this feature is _not_ secure and should probably only be used
#   for debugging purposes.

Send_Timeout 40.0
# Duration
# Default: 40.0
# Used by AWS: Yes
#
# Number of seconds before timing out when sending data.

Server_Host
# String
# Default: [no value]
# Used by AWS: Yes
#
# The name of the host machine. This can be used if a computer has more than one
# IP address. It is possible to have two servers at the same port on the same machine,
# both being bound to different IP addresses.
# If you set the Server_Host, remember that you can no longer access the server
# using http://localhost:Server_Port.
#
# Unless you _know_ you need to set the host, this parameter should be left empty.

Server_Name Yolk
# String
# Default: Yolk
# Used by AWS: Yes
#
# The name of the server.
#
# The Server_Name is prefixed to the rotating log files.

Server_Port 4242
# Positive
# Default: 4242
# Used by AWS: Yes
#
# Port the server is listening on. Remember that only root can listen on
# ports < 1024, so this value should be higher than 1024, or else you'll
# have to run the server as root, which is _not_ recommended.

Transient_Cleanup_Interval 180.0
# Duration
# Default: 180.0
# Used by AWS: Yes
#
# Time in seconds between each removal of obsolete transient pages.

Transient_Lifetime 300.0
# Duration
# Default: 300.0
# Used by AWS: Yes
#
# The amount of seconds to keep a transient page. After this time it is
# obsoleted and deleted by the next run of the cleaner task, the timer of
# which is set by the Transient_Cleanup_Interval parameter.

Upload_Directory uploads
# String
# Default: uploads
# Used by AWS: Yes
#
# The directory where uploaded files are stored.
#
# NOTE:
#     Do _not_ add the final forward slash.

Upload_Size_Limit 16#500_000#
# Positive
# Default: 16#500_000#
# Used by AWS: Yes
#
# The maximum accepted size for uploaded files in bytes.

WWW_Root static_content
# String.
# Default: static_content
# Used by AWS:  Yes and No. This value is not used by AWS internally, but it is
#               part of the default AWS configuration system.
#
# Path to the directory where the static content files are located.
#
# NOTE:
#     Do _not_ add the final forward slash.

##################################
#           Sessions             #
##################################

Session False
# Boolean
# Default: False
# Used by AWS: Yes
#
# Whether or not the server is using sessions.

Session_Cleanup_Interval 300.0
# Duration
# Default: 300.0
# Used by AWS: Yes
#
# Number of seconds between each run of the session cleanup task. This task
# will remove all session data that have been obsoleted.

Session_Data_File session/session.data
# String.
# Default: session/session.data
# Used by AWS: No
#
# Path to the file where Session data is saved when the server is closed down.
# This file is read when the server is started, and active Sessions are then
# loaded from here.
#
# NOTE:
#   Sessions are kept in memory. This file is only used to save sessions between
#   application restarts.

Session_Lifetime 1200.0
# Duration
# Default: 1200.0
# Used by AWS: Yes
#
# Number of seconds to keep session information. After this period a session
# is obsoleted and will be removed at next cleanup.
#
# NOTE:
#   Sessions are kept in memory, so a very long Session_Lifetime on a busy
#   server could possibly mean a lot of memory spend keeping track of all
#   those sessions. Use with caution.

Session_Name Yolk
# String
# Default: Yolk
# Used by AWS: Yes
#
# The name given to the session cookie.

##################################
#         Status Webpage         #
##################################

Admin_Password 0ac9c9d0c0b1ee058b65ae70c9aeb3a7
# String
# Default: 0ac9c9d0c0b1ee058b65ae70c9aeb3a7 (changemenow)
# Used by AWS: Yes
#
# This value is generated by the AWS program aws_password:
#
#     $ aws_password admin changemenow
#
# Where <password> is replaced by the password you want to use to gain access
# to the Status_Page.
#
# You should _always_ change Admin_Password to something more secure.

Admin_URI /status
# String
# Default: /status
# Used by AWS: Yes
#
# This is the URI to call the administrative page.

Status_Page templates/system/aws_status.thtml
# String
# Default: templates/system/aws_status.thtml
# Used by AWS: Yes
#
# Template used for the AWS status page.

##################################
# Logging - Rotating And Regular #
##################################

# Normally there are two kinds of log files in a Yolk application:
#
#   AWS access and error log files
#   Rotating log files.
#
# The AWS log files are similir to any other standard webserver log file. Here
# access to various resources and errors such as 404's and similar are logged.
#
# The rotating log files handle log data from the application itself. This 
# could be notifications about when an action is taken, when an SQL query is made 
# or whatever you need. You write to these log files using the Yolk.Rotating_Log.Trace 
# procedure.
#
# The rotating log parameters control when and how to rotate the logs defined
# in the GNATCOLL_Traces_Ini_File and in the Trace_Handles type found in the
# package Yolk.Rotating_Log.
#
# Three rotating log tracks are defined per default:
#
#   Error
#   Info
#   SQL
#
# The log data from the GNATCOLL.SQL package is written to the SQL track.
#
# NOTE:
#   Nothing is done to preserve the contents of the rotating log files, so
#   whenever the server is restarted, these files are truncated.

Activate_Rotating_SQL_Log True
# Boolean
# Default: True
# Used by AWS: No
#
# When this is True, all non SELECT SQL queries generated by GNATcoll are 
# written to the SQL rotating log file.
# This is usually a fairly busy stream, so it should probably only be set to
# True during development/debugging.

Activate_Rotating_SQL_Cache_Log True
# Boolean
# Default: True
# Used by AWS: No
#
# When this is True, all SQL queries generated by GNATcool that involve the cache
# are written to the SQL rotating log file.
# Depending on your application, this can be a very busy stream, so it should  
# probably only be set to True during development/debugging.

Activate_Rotating_SQL_Error_Log True
# Boolean
# Default: True
# Used by AWS: No
#
# When True, all database related errors (failed transactions, failed connections)
# are logged to the SQL rotating log file. This should probably always be True.

Activate_Rotating_SQL_Select_Log True
# Boolean
# Default: True
# Used by AWS: No
#
# When True, all GNATcoll SQL SELECT queries are written to the rotating log file.
# This is usually a very busy stream, so it should probably only be set to True
# during development/debugging.

Amount_Of_Log_Files_To_Keep 30
# Integer
# Default: 30
# Used by AWS: No
#
# The amount of access and error log files that are kept when the
# Yolk.Log_File_Cleanup.Delete procedure is called.
#
# This parameter does not control the rotating log files. Look at Max_Slot_Count
# to change these.

Error_Log_Filename_Prefix yolk_error
# String
# Default: yolk_error
# Used by AWS: Yes
#
# What to prefix to the errorlog filename.
# If commented then <program name>_error is used.
#
# NOTE:
#
#   Must _not_ be set to the same value as Log_Filename_Prefix
#
# The Yolk.Log_File_Cleanup.Delete procedure search for error log files named:
#
#       Error_Log_Filename_Prefix*
#
# So if Error_Log_Filename_Prefix is set to yolk_error, then the cleanup routine
# will search in the Log_File_Directory for files named:
#
#       yolk_error*
#
# This in turn means that you should take care _not_ to set this prefix to
# something that would collide with Log_Filename_Prefix, or any other log files
# for that matter, especially if you set the Log_File_Directory to a directory
# where log files from other applications are kept.
#
# In other words: Make absolute sure that Error_Log_Filename_Prefix is unique to
# this application.

Enable_Access_Log True
# Boolean
# Default: True
# Used by AWS: No
#
# Often a Yolk application will be running behind some sort of proxy, and this
# proxy might log all requests. In such a case, it is a waste of resources to
# also have Yolk log all access requests. Setting this to False will disable
# access logging.
# It does _not_ affect error logging or the rotating log system.

Error_Log_Split_Mode Daily
# Enumeration (None, Each_Run, Daily, Monthly)
# Default: Daily
# Used by AWS: Yes
#
# Specifies how to split the error logs. Each_Run means that a new log file
# is created each time the application is started and then never split.
# Daily and Monthly will split a new log file each day or month.
# None means that the log file is never split.
#
# All of these are overruled if the Log_Size_Limit is reached. The the log file
# is split and a date and time is appended to the filename.

Immediate_Flush False
# Boolean.
# Default: False.
# Used by AWS: No
#
# If set to True, data will be written to log files immediately, bypassing buffers.
# This parameter affects only rotating log files, but you can use it for the AWS
# log files also when starting those with the AWS.Server.Log.Start procedure, as this
# procedure has an Auto_Flush option that takes a Boolean.

Log_Extended_Fields
# String
# Default: [no value]
# Used by AWS: Yes
#
# Comma separated list of the extended log field names. If this parameter
# is empty, the HTTP log will have a fixed Apache compatible format:
#
#    127.0.0.1 - - [25/Apr/1998:15:37:29 +0200] "GET / HTTP/1.0" 200 1363
#
# If the extended fields list is not empty, the log file format would have
# user defined fields set:
#
#    #Version: 1.0
#    #Date: 2006-01-09 00:00:01
#    #Fields: date time cs-method cs-uri cs-version sc-status sc-bytes
#    2006-01-09 00:34:23 GET /foo/bar.html HTTP/1.1 200 30
#
# Fields in the list could be:
#
#  date         Date at which transaction completed
#  time         Time at which transaction completed
#  c-ip         Client side connected IP address
#  c-port       Client side connected port
#  s-ip         Server side connected IP address
#  s-port       Server side connected port
#  cs-method    HTTP request method
#  cs-username  Client authentication username
#  cs-version   Client supported HTTP version
#  cs-uri       Request URI
#  cs-uri-stem  Stem portion alone of URI (omitting query)
#  cs-uri-query Query portion alone of URI
#  sc-status    Responce status code
#  sc-bytes     Length of response message body
#  cs(<header>) Any header field name sent from client to server
#  sc(<header>) Any header field name sent from server to client
#  x-<appfield> Any application defined field name
#
# See the AWS manual for more information on how to use extended fields.

Log_File_Cleanup_Interval 3600.0
# Duration
# Default: 3600.0 (1 hour)
# Used by AWS: No
#
# The amount of seconds between each activation of the Log_File_Monitor cleanup
# task. Obviously this parameter is only used if the application makes use of a
# log file cleanup system similar to the one used in the Yolk demo.
# Since the Log_File_Monitor task performs a very simple search for log files in
# the Log_File_Directory, this might be a costly operation if there are a lot of
# log files in the Log_File_Directory.
#
# The Log_File_Monitor simply search the Log_File_Directory for this:
#
#   Log_Filename_Prefix*
#   Error_Log_Filename_Prefix*
#
# It then compiles a list of files, from which files are deleted until the length
# of the list equals Amount_Of_Log_Files_To_Keep. Oldest files are deleted first.
#
# As long as you keep the Yolk log files in logs/, then it's probably not an issue,
# but if you move them to a possibly busy directory like /var/log/ then an hourly
# check might be a bit much.
#
# On the other hand, if the server is very busy, and you don't want to drown in
# log files, then lowering this value might do the trick.

Log_File_Directory logs/
# String.
# Default: logs/
# Used by AWS: Yes
#
# Path to where the log files are written. Must be read/writable by the server.
# This parameter affects both the AWS access/error log files and the rotating
# log files.

Log_Filename_Prefix yolk_access
# String
# Default: yolk_access
# Used by AWS: Yes
#
# What to prefix to the accesslog filename.
# If commented then <program name>_access is used.
#
# NOTE:
#
#   Must _not_ be set to the same value as Error_Log_Filename_Prefix
#
# The log file cleanup routine search for access log files named:
#
#       Log_Filename_Prefix*
#
# So if Log_Filename_Prefix is set to yolk_access, then the cleanup routine
# will search in the Log_File_Directory for files named:
#
#       yolk_access*
#
# This in turn means that you should take care _not_ to set this prefix to
# to something that would collide with Error_Log_Filename_Prefix, or any other
# log files for that matter, especially if you set the Log_File_Directory to a
# directory where there's a lot of other log files.
#
# In other words: Make absolute sure that Log_Filename_Prefix is unique to this
# application.

Log_Size_Limit 10_000_000
# Integer
# Default: 10_000_000
# Used by AWS: Yes
# Split AWS access and error log files when they reach this size in bytes.
#
# If this is set to 0, then AWS access and error log files are never split based
# on size.
#
# Make sure that Log_Size_Limit is set according to the amount of space you wish
# to use for log files. If it's set at 1_000_000 then you get
#
#   Amount_Of_Log_Files_To_Keep x 1MB
#
# Which given enough time will result in 60 files total (access and error).
# Granted, if your app is working as intended, your error files should all be empty,
# but they will be there.
# This parameter does not affect the size of the rotating log files. Look for the
# Rotating_Log_Size_Limit parameter to control the size of these files.

Log_Split_Mode Daily
# Enumeration (None, Each_Run, Daily, Monthly)
# Default: Daily
# Used by AWS: Yes
#
# Specifies how to split the access logs. Each_Run means that a new log file
# is created each time the application is started and then never split.
# Daily and Monthly will split a new log file each day or month.
# None means that the log file is never split.
#
# All of these are overruled if the Log_Size_Limit is reached. Then the log file
# is split and a date and time is appended to the filename.

Max_Slot_Count 3
# Positive.
# Default: 3
# Used by AWS: No
# The amount of slots to cycle. Amount of log files generated will equal this
# value.
# There are three default rotating log files:
#
#   ERROR
#   GNATCOLL_SQL
#   INFO
#
# Each of these will have Max_Slot_Count files to which log data is written.

Rotating_Log_Size_Limit 1_000_000
# Integer
# Default: 1_000_000
# Used by AWS: No
#
# When a rotating log file reach this size in bytes, it is "rotated" to the next
# slot (see Max_Slot_Count), so if Rotating_Log_Size_Limit is 1_000_000 and
# Max_Slot_Count is 3, then the maximum amount of space used by rotating log files
# are:
#
#   3 x 1_000_000 bytes
#
# Note that there are three default rotating log files:
#
#   ERROR
#   GNATCOLL_SQL
#   INFO
#
# These are all rotated based on the Rotating_Log_Size_Limit.

##################################
#      HTTPS - Secure Server     #
##################################

# These settings are only relevant if you're running a HTTPS enabled server.

Certificate certificates/aws.pem
# String
# Default: certificates/aws.pem
# Used by AWS: Yes
#
# Set the certificate file to be used with the secure servers.
# A single certificate or a certificate chain is supported. The certificates
# must be in PEM format and the chain must be sorted starting with the
# subject's certificate, followed by intermediate CA certificates if
# applicable and ending at the highest level (root) CA certificate. If the
# file contains only a singlecertificate, it can be followed by a private key.
# In this case the Key parameter (see below) must empty.

Exchange_Certificate False
# Boolean
# Default: False
# Used by AWS: Yes
#
# If True then request the client to send its certificate to the server.

Key
# String
# Default: [no value]
# Used by AWS: Yes
#
# Set the RSA key file to be used with a secure server.

Security False
# Boolean
# Default: False
# Used by AWS: Yes
#
# Whether or not to accept HTTPS connections. If set to True, the server will
# accept HTTPS connections. If false, only regular HTTP connections are
# accepted.
# If set to True, AWS must've been compiled with SSL enabled, and the
# Certificate option must point to a valid certificate. A test certificate
# can be made like this:
#
#   $ openssl genrsa -rand <filename> -out ca-key.pem
#   $ $ openssl req -new -x509 -days 730 -key ca-key.pem -out ca-cert.pem
#   $ cat ca-key.pem ca-cert.pem > aws.pem
#
# The file aws.pem is now usable as a test certificate.

Security_Mode SSLv23
# String
# Default: SSLv23
# Used by AWS: Yes
#
# The security mode to use for the secure connections. Available options are:
#
#   SSLv2,  SSLv23, SSLv3
#
# This parameter is obviously ignored if Security is False and/or AWS has been
# compiled without SSL support.

#########################
#   System Templates    #
#########################

System_Templates_Path templates/system
# String.
# Default: templates/system
# Used by AWS: No
#
# Path to the system template files, such as 404.tmpl, aws_directory.tmpl and
# similar.
#
# NOTE:
#     Do _not_ add the final forward slash.

############################
#  Core Resource handlers  #
############################

# These Key/Value pairs define which dispatcher is used for a given resource.
# All core resource handlers are specified in the Handlers package.

Handler_CSS \.css$
# String.
# Default: \.css$
# Used by AWS: No
#
# The regular expression used to decide if a requested resource is a CSS file.

Handler_GIF \.gif$
# String.
# Default: \.gif$
# Used by AWS: No
#
# The regular expression used to decide if a requested resource is a GIF file.

Handler_HTML \.html$
# String.
# Default: \.html$
# Used by AWS: No
#
# The regular expression used to decide if a requested resource is an HTML file.

Handler_ICO \.ico$
# String.
# Default: \.ico$
# Used by AWS: No
#
# The regular expression used to decide if a requested resource is an ICO file.

Handler_JPG \.jpg$
# String.
# Default: \.jpg$
# Used by AWS: No
#
# The regular expression used to decide if a requested resource is a JPG file.

Handler_JS \.js$
# String.
# Default: \.js$
# Used by AWS: No
#
# The regular expression used to decide if a requested resource is a JS file.

Handler_PNG \.png$
# String.
# Default: \.png$
# Used by AWS: No
#
# The regular expression used to decide if a requested resource is a PNG file.

Handler_SVG \.svg$
# String.
# Default: \.svg$
# Used by AWS: No
#
# The regular expression used to decide if a requested resource is an SVG file.

Handler_XML \.xml$
# String.
# Default: \.xml$
# Used by AWS: No
#
# The regular expression used to decide if a requested resource is an XML file.

Handler_XSL \.xsl$
# String.
# Default: \.xsl$
# Used by AWS: No
#
# The regular expression used to decide if a requested resource is an XSL file.
