Sending emails from a Yolk application can be done on two ways:

    1. Using the plain AWS email facilities.
    2. Using the Yolk.Email.Composer package.

The latter is the preferred method, but both are perfectly valid. In this
document we're going to focus on how to use the Yolk.Email.Composer package.

With this package you can create

    Plain text emails.
    Multipart/Alternative emails
    Multipart/Mixed emails

The package supports multiple SMTP servers, meaning you can add as many as you
like, and the email will then be send via the first one that accepts it.

See the file core/yolk-email-composer.ads for all the procedures available and
core/yolk-email.ads for the exceptions and types used by the package.

When using Yolk.Email.Composer to send emails, you get two convenience
procedures:

    procedure Send
      (ES             : in out Structure;
       From_Address   : in     String;
       From_Name      : in     String := "";
       To_Address     : in     String;
       To_Name        : in     String := "";
       Subject        : in     String;
       Text_Part      : in     String;
       SMTP_Server    : in     String;
       SMTP_Port      : in     Positive := 25;
       Charset        : in     Character_Set := US_ASCII);

    procedure Send
      (ES             : in out Structure;
       From_Address   : in     String;
       From_Name      : in     String := "";
       To_Address     : in     String;
       To_Name        : in     String := "";
       Subject        : in     String;
       Text_Part      : in     String;
       HTML_Part      : in     String;
       SMTP_Server    : in     String;
       SMTP_Port      : in     Positive := 25;
       Charset        : in     Character_Set := US_ASCII);

The first send plain text emails and the second send multipart/alternative
emails. Here's a usage example:

    with Ada.Text_IO;
    with Yolk.Email.Composer;

    declare
       use Yolk.Email;

       Email : Structure;
    begin
       Composer.Send (ES           => Email,
                      From_Address => "name@from",
                      From_Name    => "Thomas Løcke",
                      To_Address   => "name@to",
                      To_Name      => "Thomas Løcke",
                      Subject      => "A plain text email",
                      Text_Part    => "Here ya go!",
                      SMTP_Server  => "smtp.server",
                      Charset      => ISO_8859_1);

       if Composer.Is_Send (Email) then
          Ada.Text_IO.Put_Line ("Success!");
       else
          Ada.Text_IO.Put_Line ("Gack! Failure...");
       end if;

    exception
       when others =>
          Ada.Text_IO.Put_Line ("Email problem!");
    end;

We could've build the exact same email "by hand", like this:

    with Ada.Text_IO;
    with Yolk.Email.Composer;

    declare
       use Yolk.Email;

       Email : Structure;
    begin
       Composer.Add_From (ES      => Email,
                          Address => "name@from",
                          Name    => "Thomas Løcke",
                          Charset => ISO_8859_1);

       Composer.Add_Recipient (ES      => Email,
                               Address => "name@to",
                               Name    => "Thomas Løcke"
                               Charset => ISO_8859_1);

       Composer.Set_Subject (ES      => Email,
                             Subject => "A plain text email",
                             Charset => ISO_8859_1);

       Composer.Set_Text_Part (ES      => Email,
                               Part    => "Here ya go!",
                               Charset => ISO_8859_1);

       Composer.Add_SMTP_Server (ES   => Email,
                                 Host => "smtp.server");

       Composer.Send (ES => Email);

       if Composer.Is_Send (Email) then
          Ada.Text_IO.Put_Line ("Success!");
       else
          Ada.Text_IO.Put_Line ("Gack! Failure...");
       end if;

    exception
       when others =>
          Ada.Text_IO.Put_Line ("Email problem!");
    end;

It is possible to mix calls to the convenience procedures with the various
"by hand" procedures, as long as you do it prior to calling the Send procedure.

