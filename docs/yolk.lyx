#LyX 1.6.9 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Yolk Manual
\end_layout

\begin_layout Author
written by Thomas LÃ¸cke
\end_layout

\begin_layout Date
Revised June 6th.
 2011
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
What is Yolk?
\end_layout

\begin_layout Standard
Yolk is a collection of tools that aim to help build solid web-applications
 using Ada.
 Yolk itself doesn't do a whole lot that can't be accomplished simply by
 using 
\begin_inset CommandInset href
LatexCommand href
name "AWS"
target "http://libre.adacore.com/libre/tools/aws/"

\end_inset

 and the 
\begin_inset CommandInset href
LatexCommand href
name "GNAT Component Collection (GNATcoll)"
target "http://libre.adacore.com/libre/tools/gnat-component-collection/"

\end_inset

, but it does make the job of building complete web-applications a bit simpler.
 Things like changing user for the running application, accessing multiple
 databases, automatically cleaning up log files, adding basic static content
 handlers and starting/stopping the application using an rc script are all
 handled by Yolk.
\end_layout

\begin_layout Standard
A Yolk application is in reality an AWS application, with some sugar added,
 so you're not really building a Yolk web-application, as much as you're
 building an AWS web-application.
 What I'm getting at, is that you need to understand how to use AWS, in
 order for Yolk to make any kind of sense.
 What you get when using Yolk is the little things that AWS does not readily
 provide.
\end_layout

\begin_layout Section
The Yolk demo application
\end_layout

\begin_layout Standard
Reading this manual will of course (I hope!) help you understand how to
 use Yolk, but please consider downloading the Yolk demo application to
 see how Yolk is actually used.
 The demo has been heavily commented, so it should be fairly easy to understand
 what's going on.
 The demo application is also very suitable as a foundation for other AWS/Yolk
 applications.
 The demo application is available at TODO: URL
\end_layout

\begin_layout Standard
It is much easier to show how to use Yolk, than it is to write down all
 possible usage scenarios.
 With the combination of this manual, the Yolk source files and the demo
 application, you should be able to fully make use of the Yolk packages
 in your own applications.
\end_layout

\begin_layout Section
Building and installing Yolk
\end_layout

\begin_layout Standard
See the README and INSTALL files.
 These are found in the Yolk root directory.
\end_layout

\begin_layout Section
The Yolk core packages
\end_layout

\begin_layout Standard
The Yolk core packages are those packages that are considered, well, core
 to Yolk's functionality.
 Here you'll find packages for configuration, log file management, process
 control and similar.
 These packages will probably be used in all Yolk applications.
\end_layout

\begin_layout Subsection
Yolk
\end_layout

\begin_layout Standard
The Yolk main package currently only contain one thing: The Yolk Version
 string.
\end_layout

\begin_layout Subsection
Yolk.Config_File_Parser
\end_layout

\begin_layout Standard
This package enable you to access KEY/VALUE pairs in configuration files
 that are in the style:
\end_layout

\begin_layout LyX-Code
# This is a comment
\end_layout

\begin_layout LyX-Code
-- This is also a comment
\end_layout

\begin_layout LyX-Code
KEY VALUE
\end_layout

\begin_layout Standard
Blank lines and comments are ignored and so is pre/postfixed whitespace.
 It is not necessary to quote values that contain whitespace, to this:
\end_layout

\begin_layout LyX-Code
KEY some value with whitespace
\end_layout

\begin_layout Standard
is perfectly valid, and will return 
\begin_inset Quotes eld
\end_inset


\emph on
some value with whitespace
\emph default

\begin_inset Quotes erd
\end_inset

 when calling Get (KEY).
 If VALUE is boolean true or false (case-insensitive), then the KEY can
 be returned as a string or a boolean, depending on the target type.
 If the target type does not match the VALUE and no sensible conversion
 can be made, then a Conversion_Error exception is raised.
 No dummy values are returned at any time.
\end_layout

\begin_layout Standard
To clear a default value, simply add the key to the configuration file,
 with no value set.
 This will cause the Empty_Key exception to be raised when you try to access
 the key.
\end_layout

\begin_layout Subsubsection
Exceptions
\end_layout

\begin_layout Standard
There are 4 different exceptions that can be raised by the Yolk.Config_File_Parse
r package.
 These are:
\end_layout

\begin_layout Itemize
Unknown_Key.
 This is raised if an unknown key has been found in the configuration file
 given when instantiating the package or when Load_File is called.
\end_layout

\begin_layout Itemize
Cannot_Open_Config_File.
 This is raised when a configuration file cannot be read.
\end_layout

\begin_layout Itemize
Conversion_Error.
 This is raised when a value cannot be converted to the target type, ie.
 the value 
\begin_inset Quotes eld
\end_inset

42
\begin_inset Quotes erd
\end_inset

 to a Boolean.
\end_layout

\begin_layout Itemize
Empty_Key.
 This is raised when the value of a key is a Null_Unbounded_String.
\end_layout

\begin_layout Subsubsection
Instantiation
\end_layout

\begin_layout Standard
Yolk.Config_File_Parser is a generic package, so in order to use it, you
 have to instantiate it, like this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Ada,showstringspaces=false,tabsize=3,xleftmargin=1em"
inline false
status open

\begin_layout Plain Layout

with Ada.Strings.Unbounded;
\end_layout

\begin_layout Plain Layout

with Yolk.Config_File_Parser;
\end_layout

\begin_layout Plain Layout

with Yolk.Utilities; use Yolk.Utilities;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

package My_Configuration is
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   type Keys is (Foo, Bar);
\end_layout

\begin_layout Plain Layout

   type Defaults_Array is array (Keys) of
\end_layout

\begin_layout Plain Layout

     Ada.Strings.Unbounded.Unbounded_String;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   Default_Values : constant Defaults_Array :=
\end_layout

\begin_layout Plain Layout

                      (Foo => TUS ("some foo"),
\end_layout

\begin_layout Plain Layout

                       Bar => TUS ("some bar"));
\end_layout

\begin_layout Plain Layout

   --  TUS is a rename of the To_Unbounded_String function.
 It
\end_layout

\begin_layout Plain Layout

   --  is found in the Yolk.Utilities package.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   package Config is new Yolk.Config_File_Parser
\end_layout

\begin_layout Plain Layout

     (Key_Type => Keys,
\end_layout

\begin_layout Plain Layout

      Defaults_Array_Type => Defaults_Array,
\end_layout

\begin_layout Plain Layout

      Defaults => Default_Value,
\end_layout

\begin_layout Plain Layout

      Config_File => "config.ini");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

end My_Configuration;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here we instantiate the Config package with 
\begin_inset Quotes eld
\end_inset

config.ini
\begin_inset Quotes erd
\end_inset

 as the configuration file.
 This means that KEY/VALUE pairs found in this file will overwrite the default
 values set in the Default_Values array.
 Also not that we've defined the default values.
 This must be done and all KEY's must be present.
 If the default value is empty, simply set it to Null_Unbounded_String.
\end_layout

\begin_layout Subsubsection
Re-loading configuration files
\end_layout

\begin_layout Standard
If a configuration file has been updated, you might want to re-load it into
 the Config package.
 This is done using the Load_File procedure:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Ada,showstringspaces=false,tabsize=3,xleftmargin=1em"
inline false
status open

\begin_layout Plain Layout

My_Configuration.Config.Load_File ("new_config.ini");
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And that is all.
 Now the KEY/VALUE pairs of new_config.ini will overwrite the ones originally
 found in the config.ini file the package was instantiated with.
 You can do this as many times as you like.
 Note that you cannot change what KEY's are valid, so if the new_config.ini
 contains unknown keys, Load_File will raise the Unknown_Key exception.
\end_layout

\begin_layout Subsubsection
Getting values
\end_layout

\begin_layout Standard
With instantiation and loading of configuration files out of the way, it
 is now time to get to the configuration values.
 To get the value of the Foo key, you do:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Ada,showstringspaces=false,tabsize=3,xleftmargin=1em"
inline false
status open

\begin_layout Plain Layout

My_Configuration.Config.Get (Foo);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are Get functions for the following types:
\end_layout

\begin_layout Itemize
Boolean
\end_layout

\begin_layout Itemize
Duration
\end_layout

\begin_layout Itemize
Float
\end_layout

\begin_layout Itemize
Integer
\end_layout

\begin_layout Itemize
String
\end_layout

\begin_layout Itemize
Unbounded_String
\end_layout

\begin_layout Standard
If a key is empty (ie.
 contains a Null_Unbounded_String), the Empty_Key exception is raised.
\end_layout

\begin_layout Subsubsection
Checking if a KEY has a VALUE
\end_layout

\begin_layout Standard
You can check if a key has a value with the Has_Value function:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Ada,showstringspaces=false,tabsize=3,xleftmargin=1em"
inline false
status open

\begin_layout Plain Layout

if Has_Value (Foo) then
\end_layout

\begin_layout Plain Layout

   Put_Line ("Foo has a value");
\end_layout

\begin_layout Plain Layout

end if;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Basically all this function does is return Boolean True if the value of
 the given key is not a Null_Unbounded_String.
\end_layout

\begin_layout Subsection
Yolk.Configuration
\end_layout

\begin_layout Standard
This package is a bit of an oddball, as all it does is instantiate the Yolk.Confi
g_File_Parser generic with the default AWS and Yolk configuration values.
 This is used by Yolk internally, but also by the AWS component of your
 application.
 The instantiation looks like this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Ada,showstringspaces=false,tabsize=3,xleftmargin=1em"
inline false
status open

\begin_layout Plain Layout

package Config is new Config_File_Parser
\end_layout

\begin_layout Plain Layout

  (Key_Type => Keys,
\end_layout

\begin_layout Plain Layout

   Defaults_Array_Type => Defaults_Array,
\end_layout

\begin_layout Plain Layout

   Defaults => Default_Values,
\end_layout

\begin_layout Plain Layout

   Config_File => "configuration/config.ini");
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As you can see, it is required that there's a configuration file found in
 
\emph on
configuration/config.ini
\emph default
.
 This path is of course relative to the application.
 There's a fully commented config.ini file available in 
\emph on
extras/configuration/
\emph default
.
\end_layout

\begin_layout Standard
I recommend that you grab the Yolk demo application to see how the Yolk.Configura
tion package is used.
\end_layout

\begin_layout Subsubsection
Get the AWS specific configuration settings
\end_layout

\begin_layout Standard
When you start an AWS server, you need to give it an AWS.Config.Object with
 all the necessary configuration settings.
 This is already handled for you in Yolk.Configuration, all you have to do
 is call the Get_AWS_Configuration function, for example like this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Ada,showstringspaces=false,tabsize=3,xleftmargin=1em"
inline false
status open

\begin_layout Plain Layout

AWS_Config : constant AWS.Config.Object := Get_AWS_Configuration;
\end_layout

\begin_layout Plain Layout

AWS.Server.Start (Web_Server => Web_Server,
\end_layout

\begin_layout Plain Layout

                  Dispatcher => Resource_Handlers,
\end_layout

\begin_layout Plain Layout

                  Config     => AWS_Config);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You're not forced to use this, if you don't want to.
 But even if you don't, you'll still have to make a valid configuration
 file available in the configuration directory defined in the Config instantiati
on, so you might as well use this as the configuration foundation for the
 AWS HTTP server component if your application.
\end_layout

\end_body
\end_document
