In Yolk vocabulary a Handler is procedure that handles a request for a
specific kind of resource.

The handlers defined in the core/handlers.ad* package take care of various
kinds of static content (graphics, HTML, XML and so on), while the handlers
defined in my_handlers/my_handlers.ad* deal with application specific content.

Basically the idea is that a user requests a resource:

    http://domain.tld/Foo

And you then define a handler for Foo in my_handlers.adb:

    AWS.Services.Dispatchers.URI.Register_Regexp
      (Dispatcher => RH,
       URI        => "/[Ff]oo",
       Action     => View.Foo.Generate'Access);

Here we've registered View.Foo.Generate as the function that handles requests
for the /Foo resource, and because we use the Register_Regexp procedure it's
possible to enter a regular expression in the URI parameter, meaning that it
doesn't matter if users request /Foo or /foo, they'll get the same handler.

If you don't want that functionality, you can go with plain Register instead:

    AWS.Services.Dispatchers.URI.Register
      (Dispatcher => RH,
       URI        => "/Foo",
       Action     => View.Foo.Generate'Access);

You are of course allowed to mix those as you please.

In Yolk if no handler match the requested resource, the default behavior is to
return a 404. This behavior is defined in the call to Register_Default_Callback:

    AWS.Services.Dispatchers.URI.Register_Default_Callback
      (Dispatcher => RH,
       Action     => Create (Callback => Unknown_Content.Generate'Access));

If you want to change this, simply either get rid of this call, or change the
Callback parameter to something else.

In regards to Register_Default_Callback there are probably two schools of thought:

    1.  The default is the primary website content, a frontpage or something to
        that effect.
    2.  The default is a 404. Resources that doesn't match any registered handlers
        are non-existant, and should therefore return a 404 error.

I prefer the latter. If it's not specifically defined by me, it doesn't exist.

For more on AWS dispatchers, please read the AWS manual:

http://www.adacore.com/wp-content/files/auto_update/aws-docs/aws.html#Dispatchers
